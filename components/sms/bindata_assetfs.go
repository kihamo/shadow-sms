// Code generated by go-bindata.
// sources:
// templates/views/index.html
// templates/views/send.html
// DO NOT EDIT!

package sms

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\x4d\x6f\x83\x30\x0c\xbd\xf3\x2b\xac\x48\xdb\x2d\xa5\xed\x61\x9a\x56\xca\x61\xd2\x8e\x3b\x55\xda\xdd\x10\x03\x91\x42\x40\x49\x58\x57\x75\xfd\xef\x0b\xe5\xa3\xb4\xeb\xaa\x69\xd2\x22\x11\xe4\x98\x3c\xbf\xf7\x6c\xf6\x7b\x10\x94\x49\x4d\xc0\xd2\x4a\x3b\xd2\x8e\xc1\xe1\x10\x44\x42\xbe\x43\xaa\xd0\xda\x35\x33\xd5\x96\xc5\x01\xf8\x35\x3d\x4d\x2b\xc5\x55\xce\x17\xcb\x3e\x77\xcc\x17\x8b\x21\x5d\x63\x4e\xbc\x20\x14\x64\x58\xbc\x79\xdd\x44\x61\xb1\xe8\x41\x42\x8f\x12\x07\xfd\x2b\xf0\x04\x64\x06\xb3\x04\x15\xea\x94\x5e\x8c\xa9\x4c\x4b\xe0\xb2\x1c\x2a\x32\x0e\x8e\x3b\x17\xa8\x73\x32\x43\x20\x6d\x29\xad\xc5\x44\xd1\x94\x49\xd2\x38\x57\x69\x70\xbb\x9a\xd6\xac\x0b\xd8\x48\x5d\x55\x96\x18\x08\x74\x38\x5c\xef\x0b\x30\x40\x23\x91\x17\x52\x08\xd2\x6b\xe6\x4c\xe3\x41\xef\x9d\x2c\xc9\xae\xa2\xb0\x83\x39\x15\xf1\xd4\xaf\xf3\xee\xa4\xf9\x34\x69\xd1\x1e\x9e\xd9\xb9\x25\xa5\xa0\xdd\xbc\x7d\x57\x7c\x6d\xdd\x06\xeb\x76\x8a\x5a\x13\x85\x90\x3a\x7f\x82\xc7\xfa\x63\x2a\xee\xa2\x0d\xa5\xe0\x0f\x2c\x8e\xac\x33\x95\xce\xe3\xe7\x8e\x51\x14\xf6\x71\xcf\xe6\xf6\xe5\x31\xdd\xeb\xf2\x2d\xc9\xdd\xa8\xee\x0d\x55\x43\x30\x9f\xcd\x07\x85\xd3\x15\xd9\x1a\xf5\x80\xa8\x30\x21\x05\xc7\x9d\xdb\x26\x4d\xc9\x5a\x16\x4f\x7c\xea\x90\x3e\xa1\x36\x52\xbb\x0c\xd8\xdd\x6c\x99\xb5\x03\x07\x91\x1c\x20\x32\x84\x0c\xb9\x69\x12\x2f\x29\x94\xfe\x69\xf1\xbf\x11\x24\x65\xe9\xc7\xc1\xf9\x15\xbd\x6e\x8a\x7c\x7b\x4b\x81\xb6\x58\xdd\xaa\xf3\x17\xd8\x7f\x11\xdd\x8d\xd3\xc8\xe1\xd4\xd9\xf3\x9f\x6a\xfc\xf4\x2b\x00\x00\xff\xff\xb5\x71\x94\xed\xde\x03\x00\x00")

func templatesViewsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsIndexHtml,
		"templates/views/index.html",
	)
}

func templatesViewsIndexHtml() (*asset, error) {
	bytes, err := templatesViewsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/index.html", size: 990, mode: os.FileMode(420), modTime: time.Unix(1498049337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesViewsSendHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x61\x6f\x9b\x30\x10\xfd\x9e\x5f\x71\x63\x53\x01\x6d\x24\x4d\x5a\x69\x9a\x4a\xf2\x0f\xaa\x55\xea\xc7\x69\x1f\x1c\xb8\x04\x57\xc6\x66\xb6\x49\xd7\x56\xf9\xef\x3b\x03\xa6\xa4\xa5\x8d\xb6\x6a\xd3\x90\x5a\xb0\xef\x78\xf7\xee\xf9\x1d\x79\x78\x80\x1c\x37\x5c\x22\x04\x99\x92\x16\xa5\x0d\x60\xbf\x9f\xa4\x39\xdf\x41\x26\x98\x31\xcb\x40\xab\xdb\x60\x35\x01\xba\x86\xbb\x99\x12\x89\xd8\x26\xf3\x45\x17\x6b\xe2\xc5\xdc\x87\x2b\xb6\xc5\xa4\x40\x96\xa3\x0e\x56\xd7\x28\x73\xb8\xbe\xbc\x4e\x67\xc5\xbc\x43\x9a\x11\xd4\x6a\xe2\x6f\x1b\xa5\x4b\xff\xa6\x7b\x4e\x0a\xa5\xf9\x3d\xf1\x61\x22\x00\xad\x04\xb6\xdb\x01\x94\x68\x0b\x95\x13\xbc\x32\x44\x94\xd3\x93\x21\xec\xc4\x94\x66\x84\x62\x83\xb4\xd5\xaa\xae\x86\x1c\x05\x5b\xa3\x00\x8a\x11\x4a\xa1\x24\x06\xc3\x8e\x4c\x99\x2c\xc0\x09\xa1\x5d\x7b\x2e\x33\x58\x5d\xb9\xac\x74\xd6\xac\x06\x38\x4f\xb4\xa0\x37\xe7\xa7\x83\x3a\x4d\x0e\x97\x55\x6d\xc1\xde\x55\xd4\x80\xc5\x9f\x36\x38\xa0\xd6\xd5\x69\xfb\xe8\xb8\x48\x56\x62\xbf\xa8\x04\xcb\xb0\x50\x82\x44\x5c\x06\x9f\xbf\x9c\xce\x17\x8b\xc5\xd9\xd9\xf9\x79\x00\x3b\x26\x6a\xca\x1b\xf6\xd5\x4a\xf9\xf4\xf1\x77\xe4\x28\xd1\x18\x3a\xb6\xa3\x82\x5c\xb6\x79\x7f\x26\x89\x93\x81\x69\x64\xe3\x4a\x90\xd7\x68\xef\xdc\xeb\xd0\x33\x72\x0a\xf9\xc5\x2a\x9d\x79\x90\xb7\xb7\x3f\x46\x19\xba\x27\xb5\xd9\x18\xb4\xc9\x62\xfc\x54\x1b\xf3\xd5\xeb\x92\x5b\xcf\xd6\xaf\xda\xf3\xf6\xab\xee\xa8\xdc\x0c\xf4\xca\xae\xad\x04\xfa\x4b\x2a\xcd\x4b\xa6\xef\x5e\x3d\xc6\x74\xe6\x98\xaf\x26\x34\xa9\x6e\x8c\x68\x38\x27\x83\xa1\xbd\x31\xed\xbc\x9a\x4c\xf3\xca\x82\x60\x72\x5b\x93\x48\xcb\xe0\x86\xed\x58\xbb\xd9\xa1\x7f\x88\x36\xb5\xcc\x2c\x57\x12\xa2\x18\x1e\xfa\x8a\x3b\xa6\xa1\x99\xbf\x25\xa5\x84\xef\xfd\x3c\x85\xf1\xc5\xa4\xcf\x71\xf1\x69\xdb\xd0\x0b\x28\x4d\x85\xa9\x1b\xcb\xa8\x49\x66\xd6\xea\x28\x64\x4d\x66\x18\x7f\xea\x10\x50\x73\x26\xf8\x3d\x46\x71\x3c\xcd\xc9\xe2\x3d\x58\x94\x33\xcb\x9e\xe2\xb9\x8b\x6f\xa0\x89\x4d\x0b\x66\xbe\xde\xca\x2b\xad\x2a\xd4\xf6\x2e\x0a\x51\x6b\xa5\xc3\x18\x4e\x4e\xc0\xc5\xbf\x75\x1b\xdf\xe1\xdd\x72\x09\xb2\x16\xe2\x59\x64\x2a\x50\x6e\x6d\x31\x56\xa5\xef\xb1\xd2\x58\x91\x00\x51\x38\x34\x06\x13\x54\x12\x9a\xff\x49\x4e\x02\xa3\xf6\x0b\x6e\x4a\x4e\xa6\x5c\x0b\x72\x65\x08\x1f\x47\x71\xfd\x15\xa6\xeb\xda\x5a\xd2\xad\xb5\x47\xbb\x78\x9c\x35\xa1\x0c\xf9\xdc\x11\xf6\xb0\x5d\xe1\x60\x75\x62\x39\x79\xff\x22\x9d\xb5\xef\x1c\xad\x74\xa8\xc7\x31\x56\x8d\xcb\xc2\xf8\x59\xd6\x1e\x50\x18\x7c\x93\x58\xa6\xce\x32\x1a\xda\xff\x5b\xad\x90\x7e\x98\xa0\xfb\xb6\x80\x73\x3f\x74\xb4\x8f\x53\x7c\x51\xba\x83\x9d\x7d\x3c\xdd\x30\x2e\x1e\xbd\x3e\xe6\xc0\xbf\xe9\xbe\x7f\xa3\xe5\x81\x8e\x2c\xcf\xc1\x2a\xf8\x51\x63\x8d\xe0\xba\xc7\xfc\x75\x86\x63\x52\xee\x87\x9f\x20\x77\x69\xb4\xb5\x96\x84\x47\xc6\xbc\x98\x0c\xd3\xfc\x3d\x9d\xb5\xdf\xbc\xc1\xe7\xf2\x57\x00\x00\x00\xff\xff\xac\xd5\xfb\xd3\xe2\x08\x00\x00")

func templatesViewsSendHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSendHtml,
		"templates/views/send.html",
	)
}

func templatesViewsSendHtml() (*asset, error) {
	bytes, err := templatesViewsSendHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/send.html", size: 2274, mode: os.FileMode(420), modTime: time.Unix(1484481925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/index.html": templatesViewsIndexHtml,
	"templates/views/send.html": templatesViewsSendHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesViewsIndexHtml, map[string]*bintree{}},
			"send.html": &bintree{templatesViewsSendHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
