// Code generated by go-bindata.
// sources:
// templates/views/send.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsSendHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x66\x99\x20\x92\x8b\xb5\xd4\xd8\xc1\x76\x9b\x48\x2e\x8a\x45\x8f\xdb\x06\x08\xd0\x4b\x51\x04\xb4\x38\xb2\x19\x50\xa4\x96\xa4\x9c\x38\x86\xdf\xbd\xa0\xfe\x22\xd9\x8a\x1d\xa0\x69\x97\x17\x8b\x9c\xe1\xfc\x7c\xf3\x71\xc6\xdb\x2d\x30\x4c\xb9\x44\x20\x89\x92\x16\xa5\x25\xb0\xdb\x8d\x22\xc6\xd7\x90\x08\x6a\x4c\x4c\xb4\x7a\x24\xf3\x11\x00\x40\xf7\x34\x51\x62\x92\xb1\xc9\xe5\x14\xdc\x97\xc9\x9a\xaf\x27\x33\xb9\x9c\xd6\xfa\xfb\x77\x9e\xee\x73\x2a\x51\x74\xa4\x87\x1a\x96\x5b\x81\x7b\x1a\xa5\xd6\x6a\x3a\xbf\x43\xc9\xe0\xee\xeb\x1d\x84\xb0\xdd\x42\xf0\x45\xc9\x94\x2f\x83\x3b\xab\xb9\x5c\x02\x31\x99\x09\x72\xad\xd6\x9c\xa1\x76\x49\x44\xe1\x6a\x3a\x60\xa7\x9b\x83\x40\xaa\x53\xfe\x44\xe6\x51\xc8\xf8\x7a\x2f\xac\x81\xa3\x5e\xa4\x0d\x5e\x03\x3e\xf2\xf9\x97\x42\x6b\x94\x16\x16\x54\x50\x99\x20\x70\x03\x51\xa2\x18\xce\x5d\xe0\xf5\xe1\x9f\x54\x14\x58\x06\x5a\x4a\xe0\xe2\xec\xf3\xec\xf3\xe5\x4d\x14\xe6\xf3\xd1\xa1\xcd\x54\xe9\xac\x71\xee\xbe\x27\x2b\xa5\xf9\xb3\x92\x96\x0a\x28\xf7\x82\x2e\x50\x4c\x04\xa6\x96\x80\x56\x02\x2b\x35\x02\x19\xda\x95\x62\x31\xc9\x95\xb1\x04\x38\x8b\x89\x41\xc9\x26\x26\x33\x04\x68\x62\xb9\x92\x31\x39\x23\x20\xd5\x9a\x0a\xce\xa8\xc5\xc3\x84\xf6\x93\xe7\x16\xb3\xca\xe9\x52\xab\x22\x1f\x80\xa0\xbd\x55\x46\xe5\x74\x63\x92\xaf\x94\x44\xf2\x42\x20\x69\xb5\x12\x55\xd8\x50\xd3\x69\xd6\xb0\x69\x36\x48\xa6\xa1\x75\xeb\xac\x42\x64\x72\x2a\x5b\xc6\xe2\xb7\x82\x6b\x64\x64\xfe\x43\x14\x3a\xc1\x91\xf8\xc2\xd2\xff\x11\x85\x43\xce\x7f\x6a\x82\xfc\xf4\xe6\x20\x23\x2e\xf3\xc2\x82\xdd\xe4\x18\x13\x8b\x4f\x96\xf4\x4a\x59\x63\x51\x55\xa7\x86\x49\xd2\x0c\xdb\x4d\x2e\x68\x82\x2b\x25\x18\xea\x98\xfc\xf4\xf3\x8f\x97\xd3\xe9\x74\x36\xbb\xba\x22\xb0\x76\x24\x8a\x09\x81\x26\xe9\x6e\xfa\x47\xd2\x3e\x20\xf7\x5b\x44\xff\x9a\x02\x19\x1a\x43\x97\xef\x4f\x82\xaf\x95\xdd\xef\x5e\x66\x57\x5a\xaa\x91\x0e\x55\x17\x34\x1a\xfe\x4c\x17\x02\xef\x1b\x35\xf7\x50\x1f\x4d\x4c\xae\x9a\x72\xb7\xf8\x38\x22\xb4\x9b\xa1\xd2\x46\x61\x63\xe4\xbf\xac\xb2\x90\xf7\x46\x09\xce\x06\x3b\xe4\xd0\x85\xb7\x31\xe2\x35\xb0\x33\x36\x51\x69\x6a\xd0\x4e\x66\xa7\x90\x5e\x14\xd6\x2a\xd9\xb6\x33\x52\xbf\x2d\x53\x2c\x32\xfe\xf2\xba\x16\x56\xc2\xc2\xca\x89\x29\x92\x04\x8d\x21\xe5\x08\x89\xc2\xea\xf2\x7b\x02\x17\x85\x2e\xf3\xa3\x13\xa4\xb3\xad\x3f\xeb\x9f\xed\x16\xdc\x60\xdb\xed\x46\xa3\xce\x38\x7e\x30\xd5\x24\x36\x89\xe6\xb9\x05\xa3\x93\x98\x84\x8c\x9a\xd5\x42\x51\xcd\x42\x6a\x0c\x5a\x13\xae\x51\x32\xa5\x4d\x58\xf7\x6e\xa5\xc3\x87\xce\x26\xc8\xb8\x0c\x1e\xcc\x2f\xeb\xd8\x8d\x9d\x5f\xf3\x5c\xf0\x84\xba\x8e\x1f\x2c\x0a\x2e\x9c\x4b\x57\xd8\xca\xc3\x7c\xd4\xfa\x12\x54\x2e\x0b\xba\xc4\x98\x3c\xd0\x35\xad\x0e\xeb\x7a\x9c\xfb\x4c\x25\x45\x86\xd2\x8e\x03\x8d\x94\x6d\xfc\xb4\x90\xe5\x10\x01\x7f\x0c\xdb\x36\xd9\xed\x16\x78\xda\x4e\xba\xdf\xb4\x56\xda\x65\xd3\x88\x25\x3e\xc2\xed\xef\xca\xf2\x74\xe3\x6f\x7b\xa0\x95\xf3\xff\x1a\xbc\xf2\x8a\xf7\xb1\x2f\xc3\x27\x7b\x0d\x5e\x67\x84\x36\x86\xf7\x15\x37\xb9\xb3\x81\x03\x36\x56\x9c\xe1\x35\xa4\x54\x18\xec\x0b\x8c\xdd\x08\x2e\x97\xd7\xe0\x2d\x94\xb2\xc6\x6a\x9a\xcf\xbc\x56\x63\x37\xbe\xe9\xe6\xd6\xd4\xab\x39\x5a\x53\x5d\x36\x43\x88\xe1\xdc\xf7\xce\x9a\x01\xeb\x8d\x6f\x5e\x74\x9c\x3c\xa8\xf8\xd9\x01\x0d\xbb\xa8\xb9\xc5\x53\xf0\x3f\x94\xba\x8c\x5a\xea\x7b\x65\x31\xbd\xf1\xbe\x9a\x5b\x1a\x6d\xa1\x65\x95\xcc\x4d\x4f\xba\xeb\xff\x81\x38\x0f\xdc\xf0\xf7\x4b\xab\xd4\x5a\xed\x7b\xd5\xe0\xf7\xc6\x1f\xeb\xb0\x50\x73\x2a\xf8\x33\xfa\xe3\x71\xc0\x94\xc4\x36\x42\xdf\x45\x31\xe4\xdc\xc5\xe9\x64\xc1\x8a\x9a\x3f\x1e\xe5\xad\x56\x39\x6a\xbb\xf1\x6b\xd4\xc7\x70\x71\x01\x4e\xfe\x57\x7d\xf0\x37\x7c\x88\x63\x90\x85\x10\x07\x92\x40\xa0\x5c\xda\xd5\x90\x17\x38\x4a\x96\xee\x3a\x46\x9c\x9e\x5e\x49\xa2\x9e\xff\x23\xca\xaf\x13\xa9\xbb\x5e\x25\x55\x77\x1d\x27\x58\x77\x75\xc9\xd6\x9e\x01\x0a\x83\xef\x82\xd0\x5d\xd5\x0c\x4f\x62\xe4\xb9\xbf\xda\xf5\x10\x02\x47\x69\x30\xa7\x6f\x56\x80\x9d\x56\xfc\x3f\x20\xeb\x3f\x89\x71\x90\x52\x2e\x5e\x88\x3d\x44\xb7\xd3\x40\xbe\x85\x66\x03\xf0\x51\xc6\xc0\x2a\xf8\x56\x60\x81\xe0\xe2\x40\xf6\xda\xe5\xd3\x94\x3b\x89\xdd\xdb\x70\xdb\xc7\x6c\xd7\xed\x56\xf0\x6a\x7f\x69\xae\xb9\xdf\x97\xe1\xd1\x36\xc5\x7f\x02\x00\x00\xff\xff\x5a\x44\x21\x70\x52\x0e\x00\x00")

func templatesViewsSendHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSendHtml,
		"templates/views/send.html",
	)
}

func templatesViewsSendHtml() (*asset, error) {
	bytes, err := templatesViewsSendHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/send.html", size: 3666, mode: os.FileMode(420), modTime: time.Unix(1517687812, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/send.html": templatesViewsSendHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"send.html": &bintree{templatesViewsSendHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
