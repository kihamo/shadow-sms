// Code generated by go-bindata.
// sources:
// templates/views/send.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsSendHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x66\x99\x20\x92\x8b\xb5\xd4\xd8\xc1\x76\x9b\x48\x2e\x8a\x45\xd1\xd3\xb6\x01\x02\xf4\x52\x14\x01\x2d\x8e\x6c\x06\x14\xa9\x25\x29\x27\x8e\xe1\x77\x2f\xa8\xbf\x48\xb6\x62\x07\x68\xda\xf2\x22\x91\x33\x9c\x9f\x6f\x3e\xcd\x68\xbb\x05\x86\x29\x97\x08\x24\x51\xd2\xa2\xb4\x04\x76\xbb\x51\xc4\xf8\x1a\x12\x41\x8d\x89\x89\x56\x8f\x64\x3e\x02\x00\xe8\x9e\x26\x4a\x4c\x32\x36\xb9\x9c\x82\x7b\x33\x59\xf3\xf6\x64\x26\x97\xd3\x5a\x7f\xff\xce\xd3\x7d\x4e\x25\x8a\x8e\xf4\x50\xc3\x72\x2b\x70\x4f\xa3\xd4\x5a\x4d\xe7\x77\x28\x19\xdc\x7d\xbd\x83\x10\xb6\x5b\x08\xbe\x28\x99\xf2\x65\xf0\x2b\xda\x3b\xab\xb9\x5c\x02\x31\x99\x09\x72\xad\xd6\x9c\xa1\x76\x79\x44\xe1\x6a\x3a\x60\xaa\x9b\x86\x40\xaa\x53\xfe\x44\xe6\x51\xc8\xf8\x7a\x2f\xb2\x81\xa3\x5e\xb0\x0d\x64\x03\x3e\xf2\xf9\x97\x42\x6b\x94\x16\x16\x54\x50\x99\x20\x70\x03\x51\xa2\x18\xce\x5d\xec\xf5\xe1\x1f\x54\x14\x58\x06\x5a\x4a\xe0\xe2\xec\xf3\xec\xf3\xe5\x4d\x14\xe6\xf3\xd1\xa1\xcd\x54\xe9\xac\x71\xee\xde\x27\x2b\xa5\xf9\xb3\x92\x96\x0a\x28\xf7\x82\x2e\x50\x4c\x04\xa6\x96\x80\x56\x02\x2b\x35\x02\x19\xda\x95\x62\x31\xc9\x95\xb1\x04\x38\x8b\x89\x41\xc9\x26\x26\x33\x04\x68\x62\xb9\x92\x31\x39\x23\x20\xd5\x9a\x0a\xce\xa8\xc5\xc3\x84\xf6\x93\xe7\x16\xb3\xca\xe9\x52\xab\x22\x1f\x80\xa0\xbd\x55\x46\xe5\x74\x63\x92\xaf\x94\x44\xf2\xc2\x21\x69\xb5\x12\x55\xd8\x50\x33\x6a\xd6\x10\x6a\x36\xc8\xa7\xa1\x75\xeb\xac\x42\x64\x72\x2a\x5b\xd2\xe2\xb7\x82\x6b\x64\x64\xfe\x5d\x14\x3a\xc1\x91\xf8\xc2\xd2\xff\x11\x85\x43\xda\x7f\x6a\x82\xfc\xf4\xe6\x20\x23\x2e\xf3\xc2\x82\xdd\xe4\x18\x13\x8b\x4f\x96\xf4\x4a\x59\x63\x51\x55\xa7\x86\x49\xd2\x0c\xdb\x4d\x2e\x68\x82\x2b\x25\x18\xea\x98\xfc\xf0\xe3\xf7\x97\xd3\xe9\x74\x36\xbb\xba\x22\xb0\x76\x24\x8a\x09\x81\x26\xe9\x6e\xfa\x47\xd2\x3e\x20\xf7\x5b\x44\xff\x98\x02\x19\x1a\x43\x97\xef\x4f\x82\xaf\x95\xdd\xff\xbd\xcc\xae\xb4\x54\x23\x1d\xaa\x2e\x68\x34\xfc\x99\x2e\x04\xde\x37\x6a\xee\x43\x7d\x34\x31\xb9\x6a\xca\xdd\xe2\xe3\x88\xd0\x6e\x86\x4a\x1b\x85\x8d\x91\x7f\xb3\xca\x42\xde\x1b\x25\x38\x1b\xec\x90\x43\x17\xde\xc6\x88\xd7\xc0\xce\xd8\x44\xa5\xa9\x41\x3b\x99\x9d\x42\x7a\x51\x58\xab\x64\xdb\xce\x48\xfd\x6d\x99\x62\x91\xf1\x97\xaf\x6b\x61\x25\x2c\xac\x9c\x98\x22\x49\xd0\x18\x52\x4e\x91\x28\xac\x2e\xbf\x27\x70\x51\xe8\x32\x3f\x3a\x41\x3a\xdb\xfa\xb5\x7e\x6c\xb7\xe0\x66\xdb\x6e\x37\x1a\x75\x26\xf2\x83\xa9\x86\xb1\x49\x34\xcf\x2d\x18\x9d\xc4\x24\x64\xd4\xac\x16\x8a\x6a\x16\x52\x63\xd0\x9a\x70\x8d\x92\x29\x6d\xc2\xba\x77\x2b\x1d\x3e\x74\x36\x41\xc6\x65\xf0\x60\x7e\x5a\xc7\x6e\xec\xfc\x9c\xe7\x82\x27\xd4\x75\xfc\x60\x51\x70\xe1\x5c\xba\xc2\x56\x1e\xe6\xa3\xd6\x97\xa0\x72\x59\xd0\x25\xc6\xe4\x81\xae\x69\x75\x58\xd7\xe3\xdc\x67\x2a\x29\x32\x94\x76\x1c\x68\xa4\x6c\xe3\xa7\x85\x2c\x87\x08\xf8\x63\xd8\xb6\xc9\x6e\xb7\xc0\xd3\x76\xd2\xfd\xa2\xb5\xd2\x2e\x9b\x46\x2c\xf1\x11\x6e\x7f\x53\x96\xa7\x1b\x7f\xdb\x03\xad\xfc\x05\xb8\x06\xaf\xbc\xe2\x7d\xec\xcb\xf0\xc9\x5e\x83\xd7\x19\xa1\x8d\xe1\x7d\xc5\x4d\xee\x6c\xe0\x80\x8d\x15\x67\x78\x0d\x29\x15\x06\xfb\x02\x63\x37\x82\xcb\xe5\x35\x78\x0b\xa5\xac\xb1\x9a\xe6\x33\xaf\xd5\xd8\x8d\x6f\xba\xb9\x35\xf5\x6a\x8e\xd6\x54\x97\xcd\x10\x62\x38\xf7\xbd\xb3\x66\xc0\x7a\xe3\x9b\x17\x1d\x27\x0f\x2a\x7e\x76\x40\xc3\x2e\x6a\x6e\xf1\x14\xfc\x0f\xa5\x2e\xa3\x96\xfa\x5e\x59\x4c\x6f\xbc\xaf\xe6\x96\x46\x5b\x68\x59\x25\x73\xd3\x93\xee\xfa\x3f\x10\xe7\x81\x1b\xfe\x7e\x69\x95\x5a\xab\x7d\xaf\x1a\xfc\xde\xf8\x63\x1d\x16\x6a\x4e\x05\x7f\x46\x7f\x3c\x0e\x98\x92\xd8\x46\xe8\xbb\x28\x86\x9c\xbb\x38\x9d\x2c\x58\x51\xf3\xfb\xa3\xbc\xd5\x2a\x47\x6d\x37\x7e\x8d\xfa\x18\x2e\x2e\xc0\xc9\xff\xac\x0f\xfe\x82\x0f\x71\x0c\xb2\x10\xe2\x40\x12\x08\x94\x4b\xbb\x1a\xf2\x02\x47\xc9\xd2\x5d\xc7\x88\xd3\xd3\x2b\x49\xd4\xf3\x7f\x44\xf9\x75\x22\x75\xd7\xab\xa4\xea\xae\xe3\x04\xeb\xae\x2e\xd9\xda\x33\x40\x61\xf0\x5d\x10\xba\xab\x9a\xe1\x49\x8c\x3c\xf7\xb7\x5d\x0f\x21\x70\x94\x06\x73\xfa\x66\x05\xd8\x69\xc5\xff\x02\xb2\xfe\x27\x31\x0e\x52\xca\xc5\x0b\xb1\x87\xe8\x76\x1a\xc8\xb7\xd0\x6c\x00\x3e\xca\x18\x58\x05\xdf\x0a\x2c\x10\x5c\x1c\xc8\x5e\xbb\x7c\x9a\x72\x27\xb1\x7b\x1b\x6e\xfb\x98\xed\xba\xdd\x0a\x5e\xed\x2f\xcd\x35\xf7\x7c\x19\x1e\x6d\x53\xfc\x3b\x00\x00\xff\xff\xcd\x15\x7f\x33\x55\x0e\x00\x00")

func templatesViewsSendHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSendHtml,
		"templates/views/send.html",
	)
}

func templatesViewsSendHtml() (*asset, error) {
	bytes, err := templatesViewsSendHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/send.html", size: 3669, mode: os.FileMode(420), modTime: time.Unix(1516894138, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/send.html": templatesViewsSendHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"send.html": &bintree{templatesViewsSendHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
