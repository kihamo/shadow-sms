// Code generated by go-bindata.
// sources:
// templates/views/send.html
// locales/ru/LC_MESSAGES/config.mo
// locales/ru/LC_MESSAGES/send.mo
// locales/ru/LC_MESSAGES/sms.mo
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsSendHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xb8\xb2\x7f\x2c\x0f\xb5\xb4\xd8\x45\x97\x25\x92\x5f\x86\x01\x7b\x68\xb6\x60\xd9\xf6\x32\x0c\x01\x2d\x9e\x2c\x06\x14\xa9\x92\x94\x13\x47\xf0\x77\x1f\xa8\x7f\x91\x6d\xc5\x31\xb6\x16\x25\x60\x98\xe4\x1d\x8f\x77\xbf\xfb\x1d\x4f\x65\x09\x0c\x13\x2e\x11\x48\xac\xa4\x45\x69\x09\x6c\xb7\xa3\x90\xf1\x35\xc4\x82\x1a\x13\x11\xad\xee\xc9\x62\x04\x00\xd0\xdf\x8d\x95\x98\x66\x6c\x7a\x36\x03\x37\x33\x59\x3b\x7b\x30\xd3\xb3\x59\xa3\xbf\x7f\xe6\xe1\x36\xa7\x12\x45\x4f\x7a\xa8\x61\xb9\x15\xb8\xa7\x51\x69\xa5\xb3\x45\x59\x02\x3f\x3b\x97\x40\x6e\x50\x32\xb8\xb9\xba\x01\x9b\x6a\x55\xac\x52\x78\x6b\x08\xf8\x20\xb9\xe8\x7e\x5e\xac\x64\xc2\x57\x40\x4c\x66\xfc\x5c\xab\x35\x67\xa8\xc9\x04\xb6\xdb\x30\x48\x67\x03\xf6\xfb\xb1\x09\xa4\x3a\xe1\x0f\x64\x11\x06\x8c\xaf\xf7\xdc\x1d\xd8\xda\x89\xa0\xc5\x71\xe0\x8e\xdc\x85\xa0\xe9\x3d\x78\x75\x1c\x3f\x15\x5a\xa3\xb4\xb0\xa4\x82\xca\x18\x81\x1b\x08\x63\xc5\x70\xf1\xd6\x9f\x25\x61\x50\x4d\xe1\xdd\xeb\xf3\xf9\xf9\xd9\xe5\x7e\x80\x7e\x73\xe8\x2f\x2a\x0a\xac\xe3\xca\x17\xa3\xc3\x3b\x13\xa5\xb3\xd6\x39\x37\x9f\xa6\x4a\xf3\x47\x25\x2d\x15\x50\xad\x05\x5d\xa2\x98\x0a\x4c\x2c\x01\xad\x04\xd6\x6a\x04\x32\xb4\xa9\x62\x11\xc9\x95\xb1\x04\x38\x8b\x88\x41\xc9\xa6\x26\x33\x04\x68\x6c\xb9\x92\x11\x79\x4d\x40\xaa\x35\x15\x9c\x51\x8b\x87\x01\xef\x83\xc3\x2d\x66\xf5\xa5\x2b\xad\x8a\x7c\x00\xa2\xee\x54\xe5\x95\xd3\x8d\x48\x9e\x2a\x89\xe4\x89\x78\xd2\x6a\x25\x6a\xb7\xa1\xa1\xe1\xbc\x65\xe1\x7c\x90\x84\x43\xa3\x23\xd3\x75\x6d\xde\x87\xed\x16\x42\x93\x53\xd9\x11\x1f\x3f\x17\x5c\x23\x23\x8b\xef\xc2\xc0\x09\x8e\xb8\x1b\x54\xee\x1c\x51\x38\x2c\x9d\x8f\xad\xcf\x1f\x4f\xf6\x39\xe4\x32\x2f\x2c\xd8\x4d\x8e\x11\xb1\xf8\x60\xc9\x4e\x66\x1b\x68\xea\x64\x35\xa8\x49\x9a\x61\xb7\xc8\x05\x8d\x31\x55\x82\xa1\x8e\xc8\x0f\x3f\x7e\x7f\x36\x9b\xcd\xe6\xf3\x0f\x1f\x08\xac\x1d\x8b\x22\x42\xa0\x0d\xba\x1f\xfe\x91\xb0\x0f\x6a\xe1\x14\xd1\xff\x66\x44\x86\xc6\xd0\xd5\x57\xe4\xc4\x55\x7b\x81\x63\xc5\x37\xcf\xba\xcb\x34\xd5\x48\x87\x92\x0d\x1a\x0d\x7f\xa4\x4b\x81\xb7\xad\x9a\x2b\xe3\x7b\x13\x91\x0f\x6d\xf6\x3b\xb8\x1c\x2f\xba\xc5\x50\xa6\xc3\xa0\x35\xf2\x35\x93\x2e\xe4\xad\x51\x82\xb3\xc1\xf7\x75\xe8\xc0\x69\x04\x79\x0e\xec\x8c\x4d\x55\x92\x18\xb4\xd3\xf9\x4b\x48\x2f\x0b\x6b\x95\xec\x1e\x3b\xd2\x94\x9a\x29\x96\x19\x7f\x2a\xb6\xa5\x95\xb0\xb4\x72\x6a\x8a\x38\x46\x63\xc8\x6e\x63\xaa\x49\x13\x06\xb5\xad\x2f\x89\x63\x18\x38\x20\x8e\xb6\xa3\xde\xb2\x99\x36\x7f\x65\x09\xae\x69\x6e\xb7\xa3\x51\xaf\xe7\xdf\x99\xaa\xdd\x97\x25\x18\x4b\x2d\x8f\x7f\xf9\xe3\xea\x13\x78\xf5\xfc\xcf\xdf\x3f\x01\x09\x18\x35\xe9\x52\x51\xcd\x02\x6a\x0c\x5a\x13\xac\x51\x32\xa5\x4d\xd0\xbc\xfa\x4a\x07\x77\xbd\x85\x9f\x71\xe9\x3b\xab\x09\x15\xa6\x6a\x4b\xa3\x51\x68\x62\xcd\x73\x0b\x82\xca\x55\x41\x57\x18\x91\x3b\xba\xa6\xf5\x66\x93\x90\x37\x1e\x53\x71\x91\xa1\xb4\x13\x5f\x23\x65\x1b\x2f\x29\x64\xd5\x63\xc0\x9b\x40\xd9\x85\xe7\x80\x4e\xba\xd6\xf7\xb3\xd6\x4a\xf7\x0b\x54\xe2\x3d\x5c\xff\xaa\x2c\x4f\x36\x5e\xb9\x03\x53\xf5\x59\x71\x01\xe3\xea\xc8\xf8\xfd\xae\x0c\x1f\xec\x05\x8c\xcb\xf2\xc0\xf0\xbe\xe2\x26\x77\x36\x70\xc0\x46\xca\x19\x5e\xd4\x41\xef\x0a\x8c\xdd\x08\x2e\x57\x17\x30\x5e\x2a\x65\x8d\xd5\x34\x9f\x8f\x3b\x8d\xed\xe4\xb2\x1f\x5b\x9b\xa1\x76\x6b\x4d\x75\xf5\x38\x42\x04\x6f\xbc\xf1\xeb\xb6\xff\x8e\x27\x97\x4f\x3a\x4e\xee\xd7\x04\xed\x81\x86\x7d\xd4\xdc\xe0\x09\x78\xaf\x2a\x5d\x46\x2d\xf5\xc6\x55\xc6\xc6\x93\x7d\x35\x37\x34\xda\x42\xcb\x3a\x98\xcb\x1d\xe9\x76\xf7\xfb\xe2\x8d\xef\xbe\x0d\xbc\xca\x2a\xb5\x56\x7b\xe3\xfa\xbb\x60\x3c\x79\xdf\xb8\x85\x9a\x53\xc1\x1f\xd1\x9b\x4c\x7c\xa6\x24\x76\x1e\x7a\xce\x8b\xa1\xcb\x9d\x9f\x4e\xe6\xa7\xd4\xfc\x76\x2f\xaf\xb5\xca\x51\xdb\x8d\xd7\xa0\x3e\x81\x77\xef\xc0\xc9\xff\x6e\x36\xfe\x81\x57\x51\x04\xb2\x10\xe2\x40\xe2\x0b\x94\x2b\x9b\x0e\xdd\x02\x47\xc9\xd2\x1f\x2d\x71\xba\x12\xaf\xb8\x51\xd7\xf8\x1e\x07\x76\x8e\x55\x9c\xda\x71\xe7\x88\xf2\xf3\xbc\xea\x8f\x67\x39\xd6\x1f\xc7\xf9\xd6\x1f\x7d\xee\x75\x7b\x80\xc2\xe0\x97\x05\xec\xa6\x79\x25\x4f\x83\xac\x77\xee\xea\x06\x9a\x66\x05\x8e\xf9\x60\x4e\x35\x54\xc3\xd9\xa8\x7f\x63\x40\x77\xeb\x67\xe2\x27\x94\x8b\xa7\x2a\x18\xe2\xe6\xcb\x30\xff\x07\x4e\x1e\x03\x97\x32\x06\x56\xc1\xe7\x02\x0b\x04\xe7\x1f\xb2\xe3\xb6\x5e\xa6\xeb\x8b\xc8\x9e\x86\xea\x3e\xa2\xdb\xfe\xc3\x07\xcf\x3e\x55\xed\x31\xf7\x1f\x06\x75\xa3\xe9\x75\xc0\x7f\x03\x00\x00\xff\xff\x19\x78\x0a\x1e\xf4\x0e\x00\x00")

func templatesViewsSendHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSendHtml,
		"templates/views/send.html",
	)
}

func templatesViewsSendHtml() (*asset, error) {
	bytes, err := templatesViewsSendHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/send.html", size: 3828, mode: os.FileMode(420), modTime: time.Unix(1522932603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesConfigMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x4d\x6f\x1b\x55\x14\x3d\x13\x9b\x2f\x83\xf8\xe8\x06\x44\x41\xdc\x0a\x51\x81\xaa\x29\x63\xbb\x41\xd5\x24\x93\x52\x4a\x2b\x45\xc4\x22\x4a\x5c\xf6\xaf\xf1\x8b\x33\xaa\xfd\x9e\x79\xf3\x26\x10\x29\x8b\xc4\x20\x56\x48\x48\x48\x48\x95\x58\x44\xea\x96\xcd\x34\xb4\xc2\xd4\x78\xba\xe0\x0f\xdc\x91\x58\x22\x58\xb0\xe5\x3f\x80\x9e\x3f\x12\x20\xe1\x6d\xee\x3d\xf7\x9c\x7b\xde\xbd\xd2\xfd\xed\x4c\xf9\x1b\x00\x78\x06\xc0\x2b\x00\x76\x01\xbc\x00\xe0\x57\x4c\x1e\x79\xc0\xb3\x00\xce\x79\xc0\xf3\x00\x02\x0f\x78\x1d\xc0\x55\x6f\xd2\x23\x3d\xe0\x39\x00\x66\x1a\xfb\x1e\xf0\x12\x80\xaf\x3d\xe0\x45\x00\xdf\x79\xc0\x6b\x00\x7e\x9e\xc6\x3f\xa6\x7d\xa5\x39\x60\xcb\x79\xce\x01\x4f\x00\xd8\x29\x01\xaf\x02\xd8\x2f\x01\x97\x00\x1c\x94\x80\x0a\x80\x5f\x4a\x13\xfd\xef\x25\xe0\x0c\x80\x3f\x4b\xc0\x59\x00\x7f\x95\x80\x97\x01\x9c\x2d\x03\x17\x00\xbc\x53\x06\xe6\x01\xdc\x2a\x4f\xfa\xee\x94\x01\x0f\xc0\x53\xee\xaf\xe9\x2e\x4f\x03\x78\x12\x13\xde\xfd\xf9\x38\x8e\xdf\x63\xd3\x58\x9e\x46\xf7\xe7\x9c\x4b\x36\xb4\xda\x8c\xdb\xe5\xab\xab\xcb\x74\x73\x6d\xe5\x08\xa6\x76\x8b\xec\x4e\x4f\xce\x0a\xcb\xca\x4a\xb3\x2d\x3a\xb4\xa9\x0d\xdd\x12\x1d\xa1\x36\x24\xa5\xbd\x96\xb0\xd2\xcc\x34\x2b\xba\x1d\xab\x19\x58\x15\x49\xf2\x89\x36\xad\x23\x6c\xf4\x76\xdc\x3a\x16\xaf\x37\xd6\x9d\x67\x87\x7a\xff\x21\x9a\xd2\x88\xf5\x6e\x72\xb2\x1e\x77\xa5\x4e\xed\x78\x80\x58\x6d\x6a\x32\xf2\xe3\x54\x26\xf6\x34\x3e\x91\xaa\x75\x82\xd7\xb7\xa5\xc2\x9a\xec\x69\x63\xfd\x46\xd2\x8e\x5b\xfe\x7b\x69\x3b\xf1\x9b\x3a\xa4\x96\xdc\x7e\xf7\x76\xbc\x25\xba\xfa\xa2\x49\x2b\xab\x1f\x36\xfd\x6b\x46\x0a\x1b\x6b\xe5\xbf\x2f\xac\x0c\xa9\x16\x54\x2f\xfb\x41\xdd\xaf\xd5\xa9\x56\x0f\xe7\xe7\x2f\x04\xf5\x20\xa8\xac\x88\xc4\xfa\x4d\x23\x54\xd2\x11\x56\x9b\x90\x3e\x18\x7b\x50\x23\x35\xa2\xab\x5b\x9a\x16\xff\x65\xbc\x54\x59\x11\xaa\x9d\x8a\xb6\xf4\x9b\x52\x74\x43\x3a\xc2\x21\xad\xa5\x49\x12\x0b\x55\x69\x2c\x37\xae\xfb\x1f\x49\x93\xc4\x5a\x85\x54\xbd\x18\x54\xae\x69\x65\xa5\xb2\x7e\x73\xa7\x27\x43\xb2\xf2\x53\xfb\x76\xaf\x23\x62\xb5\x40\x1b\x5b\xc2\x24\xd2\x46\x37\x9b\x37\xfc\xcb\xc7\x3a\x37\xcf\xa6\x34\xfe\x75\xb5\xa1\x5b\xb1\x6a\x87\x54\x59\xed\xa4\x46\x74\xfc\x1b\xda\x74\x93\x90\x54\x6f\x0c\x93\xa8\xbe\x40\x93\x34\x52\x6f\x54\x83\x28\xaa\xd2\xf9\xf3\xe4\xd2\xe0\x5c\x54\xad\xd2\x15\x0a\x28\x1c\xe3\xa5\xa8\x36\xa3\x16\xa3\x4b\x2e\x7d\x73\x2c\x5b\xac\x06\xb4\xbb\x3b\x69\x59\x8a\x6a\xc1\x5b\x74\x85\xaa\x14\x52\x6d\x01\xb3\x83\xe2\xbb\x3c\xe0\x47\xc4\x19\x1f\x16\x7d\xce\x8b\x3d\x1e\xf0\x0f\x9c\x15\x5f\xf0\x80\x07\xe0\x3b\x3c\x2a\xfa\xfc\xa0\xd8\xe3\x43\xce\x78\x48\x9c\xf3\x3d\x1e\x71\xce\x87\x3c\xe4\x07\x3c\xe2\x41\xf1\x15\xf1\x3d\xc7\x71\xc6\xa3\x62\x9f\x33\xf0\xb7\x9c\xf3\xf7\x3c\xe0\x11\xf8\x80\xb3\x62\x8f\x73\x1e\x16\x5f\x82\x0f\xc6\xa9\x33\xfa\x91\xef\x3b\xd3\x53\x4a\x34\x3b\xbc\xd3\xb8\xe9\xed\xb9\xa1\x5d\xf1\x27\xce\x8a\xcf\x8a\x3e\xf1\x7d\x1e\xba\x31\x06\x3c\x2a\x3e\xe7\x9c\xdc\x02\xfc\xc8\x75\x17\xfb\xff\xa7\xfd\x87\x84\x33\xe2\xbc\xe8\x8f\x61\xc6\x87\xfc\xd0\x2d\x7e\x97\x73\x7e\xe8\x36\xc4\xdf\x01\x00\x00\xff\xff\x37\x94\x43\x1c\xa3\x04\x00\x00")

func localesRuLc_messagesConfigMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesConfigMo,
		"locales/ru/LC_MESSAGES/config.mo",
	)
}

func localesRuLc_messagesConfigMo() (*asset, error) {
	bytes, err := localesRuLc_messagesConfigMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/config.mo", size: 1187, mode: os.FileMode(420), modTime: time.Unix(1522932604, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesSendMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x3f\x8f\x1b\x45\x18\xc6\x9f\x8d\x8f\x7f\x16\x50\x84\x86\x02\x85\x17\x91\x3b\x81\x92\xbd\xec\xda\x9c\x64\xed\x79\x2f\x08\x73\x91\x50\xb2\xe2\x74\x67\x28\xe8\x06\xef\x9c\xbd\x8a\x3d\x63\x66\x76\x11\x48\x29\x72\x49\x24\x12\x29\x12\x15\x1d\x42\x3a\x68\x28\xef\xa2\x58\x98\x84\x73\xbe\xc2\x3b\x5f\x80\x92\x1a\x0a\x0a\x3a\xb4\x5e\x27\xc1\x42\xf0\x16\xab\xe7\x99\xf7\x37\xcf\x3e\xc5\xfc\x7a\x7a\xe5\x1b\x00\xa8\x03\x78\x0d\xc0\x10\xc0\x4b\x00\x7e\x41\x35\xbf\x03\x38\x0f\xe0\x0f\x00\xcf\x00\x38\xe3\x01\xcf\x01\x38\xeb\x55\xfe\xbc\x07\xbc\x0e\xa0\xe1\x01\xaf\x02\xd8\xf5\x80\x15\x00\x57\x3d\xe0\x15\x00\xe3\x05\x7f\xcb\x03\x06\x1e\x70\xd7\x03\x36\x00\xfc\x79\x0a\x78\x11\xc0\xb9\x1a\x70\x1a\x40\xab\x06\xbc\x0c\xe0\x72\x0d\x48\x00\x7c\x52\x03\x62\x00\x3f\x2e\xf6\xbf\xd5\x80\xb3\x00\xfe\x5a\x70\x67\x56\x00\x0f\xc0\x0b\x8b\xee\x8f\xe7\xf9\x45\xcf\x1a\xaa\x1e\xcf\x02\x38\x85\xaa\xc3\x7c\x3a\x85\x31\x52\xe5\xf4\xa9\x18\x0a\xd5\x93\x94\x59\x6a\xf7\x74\x2a\xb7\x56\xd7\x1b\xfb\xed\x0b\x73\x49\x6b\x6f\xb6\x9a\xad\x70\x13\xdb\xc6\x68\x83\x44\x5a\x2b\xfa\x12\x3b\x03\xad\x24\xf6\x92\x3d\x1a\x55\x27\x24\xd2\x94\x72\x4d\x9f\x15\xb2\x90\xb4\x2f\xb2\xa1\x4c\x97\xf6\x56\xaa\x94\x6c\xd1\xeb\x49\x6b\xb1\x27\x55\x3a\xff\x50\x89\xe4\x03\xa3\x8b\xfe\x80\x56\x2d\xf6\x16\xc0\xae\x1c\x6b\x93\xfb\x89\xed\x67\xa9\xff\x5e\xd1\xb7\x7e\x57\x47\x94\xca\xcf\xdf\xbd\x9a\x0d\xc4\x48\xaf\x9b\xa2\xbe\xf3\x61\xd7\xef\x18\x29\xf2\x4c\x2b\xff\x7d\x91\xcb\x88\x1a\x41\xd8\xf2\x83\xa6\xdf\x68\x52\xa3\x19\x6d\x6c\x9c\x0b\x9a\x41\x50\xbf\x22\x6c\xee\x77\x8d\x50\x76\x28\x72\x6d\x22\xba\x3c\xcf\xa0\xa4\x30\x62\xa4\x53\x4d\xed\xa5\xe0\xad\xfa\x15\xa1\xfa\x85\xe8\x4b\xbf\x2b\xc5\x28\xa2\x27\x3e\xa2\xdd\xc2\xda\x4c\xa8\x7a\xf2\x41\xb2\xed\x7f\x2c\x8d\xcd\xb4\x8a\x28\x5c\x0f\xea\x1d\xad\x72\xa9\x72\xbf\xfb\xe5\x58\x46\x94\xcb\x2f\xf2\x0b\xe3\xa1\xc8\xd4\x26\xf5\x06\xc2\x58\x99\xc7\x1f\x75\x2f\xf9\xad\xa7\x5c\xd9\x67\x5f\x1a\x7f\x5b\xf5\x74\x9a\xa9\x7e\x44\xf5\x9d\x61\x61\xc4\xd0\xbf\xa4\xcd\xc8\x46\xa4\xc6\x73\x6b\xe3\xe6\x26\x55\x32\x56\xab\x61\x10\xc7\x21\xad\xad\x51\x29\x83\x37\xe2\x30\xa4\x8b\x14\x50\x34\xf7\x5b\x71\xe3\xf1\xaa\x1d\xbf\x53\xca\xb7\xe6\x58\x3b\x0c\xe8\xda\xb5\xea\xca\x56\xdc\x08\xde\xa6\x8b\x14\x52\x44\x8d\x4d\xf0\xf7\x3c\xe1\x07\xee\xa6\xbb\xc3\x53\xfe\x99\xf8\x98\x8f\xf8\x21\x1f\xf1\x89\x3b\xf8\x9f\xc7\xc0\xdf\xb9\xdb\x3c\xe5\x63\x7e\xc0\x47\xe0\x43\x9e\xf1\x8c\x8f\xdd\x1d\x9e\xf0\x09\x4f\x79\x52\xa5\x3e\xe4\x89\xbb\xc5\x33\x3e\x59\xc2\x89\xef\x97\x30\x1f\xf1\xbd\x92\xa8\x2e\x10\x1f\xf2\xb7\x7c\x48\xee\x60\x39\xca\x7d\x4d\x7c\x8f\x78\xe6\xbe\xe2\x89\xbb\xce\x13\xbe\xef\xee\xe2\x3f\xd8\x32\x65\xe6\x6e\xf0\x23\x77\xfd\x1f\xe1\x33\x72\x37\xdd\x01\x3f\xe2\x89\xbb\x5d\xda\xb2\xcb\x53\x66\xea\x6e\x94\x81\xff\x3a\xa2\x4e\xd2\xa1\x27\x3f\xfd\xa9\x7c\x99\xfc\xc3\x52\xcc\xdf\x01\x00\x00\xff\xff\x7d\x9b\xe5\xb7\x2d\x04\x00\x00")

func localesRuLc_messagesSendMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesSendMo,
		"locales/ru/LC_MESSAGES/send.mo",
	)
}

func localesRuLc_messagesSendMo() (*asset, error) {
	bytes, err := localesRuLc_messagesSendMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/send.mo", size: 1069, mode: os.FileMode(420), modTime: time.Unix(1522932605, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localesRuLc_messagesSmsMo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x8e\xd3\x30\x18\x84\xa7\xb0\x48\x28\x47\xce\x1c\x7e\x0e\xac\x40\xe0\xc5\x4e\x58\x69\xe5\xc6\x5d\x44\xd8\x95\x10\x1b\x51\xda\xc0\x81\x9b\xd5\x98\x34\x22\xb1\x23\xdb\x41\x20\xf5\x35\x78\x22\xde\x83\x67\x41\x4d\x81\x55\xe7\x34\x9f\xfe\x99\xd1\xff\xfb\xc1\xc9\x4f\x00\xb8\x03\xe0\x21\x80\xe7\x00\xee\x01\xc8\x71\xd0\x12\xc0\x7d\x00\x1f\x00\x6c\x67\xc0\x67\x00\x77\x01\xfc\x9a\x01\xb3\xbf\xbd\x23\xf5\xc6\x8e\x27\xeb\x72\x8d\x95\x19\x9c\x8f\xac\x0c\x4d\x5b\xb3\xd7\x63\x13\x58\xe5\x24\xd5\xe6\xdb\xab\xaf\xed\x56\xf7\xee\xcc\x8f\xc9\xf2\x7d\xc5\x0a\x6f\x74\x6c\x9d\x65\x6f\x74\x34\x92\x52\x2e\x2e\x18\xcf\x58\x9a\x51\x9a\xc9\xf3\xf3\x67\x3c\xe3\x3c\xb9\xd1\x21\xb2\xca\x6b\x1b\x3a\x1d\x9d\x97\xf4\x6e\xda\xa0\x72\xf4\xba\x77\xb5\xa3\xfc\x68\x78\x91\xdc\x68\xdb\x8c\xba\x31\xac\x32\xba\x97\xf4\x9f\x25\xad\xc6\x10\x5a\x6d\x93\xf2\x6d\x79\xc5\x3e\x19\x1f\x5a\x67\x25\x89\x33\x9e\x14\xce\x46\x63\x23\xab\x7e\x0c\x46\x52\x34\xdf\xe3\x8b\xa1\xd3\xad\x9d\xd3\x66\xab\x7d\x30\x51\x7d\xac\xae\xd9\xc5\x6d\x6e\xff\xcf\x17\xe3\xd9\x95\xdd\xb8\xba\xb5\x8d\xa4\x64\xd9\x8d\x5e\x77\xec\xda\xf9\x3e\x48\xb2\xc3\x84\x41\x65\x73\x3a\x58\x65\x1f\x0b\xae\x94\xa0\xd3\x53\xda\x5b\xfe\x48\x09\x41\x97\xc4\x49\x4e\xbc\x50\xe9\xbf\x53\xae\x5e\xee\xed\x93\x29\x96\x0b\x4e\xbb\xdd\xa1\xb2\x50\x29\x7f\x4a\x97\x24\x48\x52\x3a\x47\x51\x16\xf8\x13\x00\x00\xff\xff\xb7\x3a\x9c\x84\xc7\x01\x00\x00")

func localesRuLc_messagesSmsMoBytes() ([]byte, error) {
	return bindataRead(
		_localesRuLc_messagesSmsMo,
		"locales/ru/LC_MESSAGES/sms.mo",
	)
}

func localesRuLc_messagesSmsMo() (*asset, error) {
	bytes, err := localesRuLc_messagesSmsMoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "locales/ru/LC_MESSAGES/sms.mo", size: 455, mode: os.FileMode(420), modTime: time.Unix(1522932605, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/send.html": templatesViewsSendHtml,
	"locales/ru/LC_MESSAGES/config.mo": localesRuLc_messagesConfigMo,
	"locales/ru/LC_MESSAGES/send.mo": localesRuLc_messagesSendMo,
	"locales/ru/LC_MESSAGES/sms.mo": localesRuLc_messagesSmsMo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"locales": &bintree{nil, map[string]*bintree{
		"ru": &bintree{nil, map[string]*bintree{
			"LC_MESSAGES": &bintree{nil, map[string]*bintree{
				"config.mo": &bintree{localesRuLc_messagesConfigMo, map[string]*bintree{}},
				"send.mo": &bintree{localesRuLc_messagesSendMo, map[string]*bintree{}},
				"sms.mo": &bintree{localesRuLc_messagesSmsMo, map[string]*bintree{}},
			}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"send.html": &bintree{templatesViewsSendHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
