// Code generated by go-bindata.
// sources:
// templates/views/send.html
// DO NOT EDIT!

package internal

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesViewsSendHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x36\x13\xbe\xfb\x57\xcc\x72\x83\x48\x7e\xb1\x96\xde\xd8\xc1\x76\x9b\x48\x2e\x8a\x45\x8f\xdb\x06\x08\xd0\x4b\x51\x04\xb4\x38\xb2\x19\x50\xa4\x96\xa4\x1c\x3b\x82\xff\x7b\x41\x7d\x45\xb6\x15\x3b\x40\xd3\x96\x17\x89\x9c\xe1\x7c\x3c\xf3\x68\x46\x65\x09\x0c\x53\x2e\x11\x48\xa2\xa4\x45\x69\x09\xec\x76\xa3\x88\xf1\x35\x24\x82\x1a\x13\x13\xad\x9e\xc8\x7c\x04\x00\xd0\x3f\x4d\x94\x98\x64\x6c\x72\x35\x05\xf7\x66\xb2\xf6\x6d\x63\x26\x57\xd3\x46\xff\xf0\xce\xe6\x21\xa7\x12\x45\x4f\x7a\xac\x61\xb9\x15\x78\xa0\x51\x69\xad\xa6\xf3\x7b\x94\x0c\xee\xbf\xdd\x43\x08\x65\x09\x3e\x97\x0c\x37\x10\x7c\x55\x32\xe5\x4b\x20\x26\x33\x41\xae\xd5\x9a\x33\xd4\x64\x0c\xbb\x5d\x14\xae\xa6\x03\x86\xfa\x49\x08\xa4\x3a\xe5\x1b\x32\x8f\x42\xc6\xd7\x07\x71\x0d\x1c\xed\x85\xda\x02\x36\xe0\x23\x9f\x7f\x2d\xb4\x46\x69\x61\x41\x05\x95\x09\x02\x37\x10\x25\x8a\xe1\xbc\x2c\x21\x68\x0e\x7f\xa7\xa2\xc0\x2a\xd0\x4a\x02\x97\x1f\xbf\xcc\xbe\x5c\xdd\x46\x61\x3e\x1f\x1d\xdb\x4c\x95\xce\x5a\xe7\xee\x7d\xb2\x52\x9a\x3f\x2b\x69\xa9\x80\x6a\x2f\xe8\x02\xc5\x44\x60\x6a\x09\x68\x25\xb0\x56\x23\x90\xa1\x5d\x29\x16\x93\x5c\x19\x4b\x80\xb3\x98\x18\x94\x6c\x62\x32\x43\x80\x26\x96\x2b\x19\x93\x8f\x04\xa4\x5a\x53\xc1\x19\xb5\x78\x9c\xd0\x61\xf2\xdc\x62\x56\x3b\x5d\x6a\x55\xe4\x03\x10\x74\xb7\xaa\xa8\x9c\x6e\x4c\xf2\x95\x92\x48\x5e\x18\x24\xad\x56\xa2\x0e\x1b\x1a\x3e\xcd\x5a\x3a\xcd\x06\xd9\x34\xb4\xee\x9c\x55\x88\x4c\x4e\x65\x47\x59\xfc\x5e\x70\x8d\x8c\xcc\xff\x17\x85\x4e\x70\x22\xbe\xb0\xf2\x7f\x42\xe1\x98\xf4\x9f\xdb\x20\x3f\xbf\x39\xc8\x88\xcb\xbc\xb0\x60\xb7\x39\xc6\xc4\xe2\xc6\x92\xbd\x52\x36\x58\xd4\xd5\x69\x60\x92\x34\xc3\x6e\x93\x0b\x9a\xe0\x4a\x09\x86\x3a\x26\x3f\xfc\xf8\xff\xab\xe9\x74\x3a\x9b\x5d\x5f\x13\x58\x3b\x12\xc5\x84\x40\x9b\x74\x3f\xfd\x13\x69\x1f\x91\xfb\x2d\xa2\xbf\x4d\x81\x0c\x8d\xa1\xcb\xf7\x27\xc1\xb7\xda\xee\x7f\x5e\x66\x57\x5a\xaa\x91\x0e\x55\x17\x34\x1a\xfe\x4c\x17\x02\x1f\x5a\x35\xf7\xa1\x3e\x99\x98\x5c\xb7\xe5\xee\xf0\x71\x44\xe8\x36\x43\xa5\x8d\xc2\xd6\xc8\x3f\x59\x65\x21\x1f\x8c\x12\x9c\x0d\x76\xc8\xa1\x0b\x6f\x63\xc4\x6b\x60\x67\x6c\xa2\xd2\xd4\xa0\x9d\xcc\xce\x21\xbd\x28\xac\x55\xb2\x6b\x67\xa4\xf9\xb6\x4c\xb1\xc8\xf8\xcb\xd7\xb5\xb0\x12\x16\x56\x4e\x4c\x91\x24\x68\x0c\xa9\x66\x48\x14\xd6\x97\xdf\x13\xb8\x28\x74\x99\x9f\x9c\x20\xbd\x6d\xf3\xda\x3c\xca\x12\xdc\x64\xdb\xed\x46\xa3\xde\x3c\x7e\x34\xf5\x28\x36\x89\xe6\xb9\x05\xa3\x93\x98\x84\x8c\x9a\xd5\x42\x51\xcd\x42\x6a\x0c\x5a\x13\xae\x51\x32\xa5\x4d\xd8\xf4\x6e\xa5\xc3\xc7\xde\x26\xc8\xb8\x0c\x1e\xcd\x4f\xeb\xd8\x8d\x9d\x9f\xf3\x5c\xf0\x84\xba\x8e\x1f\x2c\x0a\x2e\x9c\x4b\x57\xd8\xda\xc3\x7c\xd4\xf9\x12\x54\x2e\x0b\xba\xc4\x98\x3c\xd2\x35\xad\x0f\x9b\x7a\x5c\xf8\x4c\x25\x45\x86\xd2\x8e\x03\x8d\x94\x6d\xfd\xb4\x90\xd5\x10\x01\x7f\x0c\x65\x97\x6c\x59\x02\x4f\xbb\x49\xf7\x8b\xd6\x4a\xbb\x6c\x5a\xb1\xc4\x27\xb8\xfb\x55\x59\x9e\x6e\xfd\x72\x0f\xb4\xea\x07\xe0\x06\xbc\xea\x8a\xf7\x69\x5f\x86\x1b\x7b\x03\x5e\x6f\x84\xb6\x86\x0f\x15\xb7\xb9\xb3\x81\x03\x36\x56\x9c\xe1\x0d\xa4\x54\x18\xdc\x17\x18\xbb\x15\x5c\x2e\x6f\xc0\x5b\x28\x65\x8d\xd5\x34\x9f\x79\x9d\xc6\x6e\x7c\xdb\xcf\xad\xad\x57\x7b\xb4\xa6\xba\x6a\x86\x10\xc3\x85\xef\x7d\x6c\x07\xac\x37\xbe\x7d\xd1\x71\xf2\xa0\xe6\x67\x0f\x34\xec\xa3\xe6\x16\x4f\xc1\xff\x50\xe9\x32\x6a\xa9\xef\x55\xc5\xf4\xc6\x87\x6a\x6e\x69\xb4\x85\x96\x75\x32\xb7\x7b\xd2\xdd\xfe\x0f\xc4\x45\xe0\x86\xbf\x5f\x59\xa5\xd6\x6a\xdf\xab\x07\xbf\x37\xfe\xd4\x84\x85\x9a\x53\xc1\x9f\xd1\x1f\x8f\x03\xa6\x24\x76\x11\xfa\x2e\x8a\x21\xe7\x2e\x4e\x27\x0b\x56\xd4\xfc\xf6\x24\xef\xb4\xca\x51\xdb\xad\xdf\xa0\x3e\x86\xcb\x4b\x70\xf2\x3f\x9a\x83\x3f\xe1\x43\x1c\x83\x2c\x84\x38\x92\x04\x02\xe5\xd2\xae\x86\xbc\xc0\x49\xb2\xf4\xd7\x29\xe2\xec\xe9\x55\x24\xda\xf3\x7f\x42\xf9\x75\x22\xf5\xd7\xab\xa4\xea\xaf\xd3\x04\xeb\xaf\x3e\xd9\xba\x33\x40\x61\xf0\x5d\x10\xba\xaf\x9b\xe1\x59\x8c\x3c\xf7\xaf\xdd\x0c\x21\x70\x94\x06\x73\xfe\x66\x0d\xd8\x79\xc5\x7f\x03\xb2\xfd\x4f\x62\x1c\xa4\x94\x8b\x17\x62\x0f\xd1\xed\x3c\x90\x6f\xa1\xd9\x00\x7c\x94\x31\xb0\x0a\xbe\x17\x58\x20\xb8\x38\x90\xbd\x76\xf9\x3c\xe5\xce\x62\xf7\x36\xdc\x0e\x31\xdb\xf5\xbb\x15\xbc\xda\x5f\xda\x6b\xee\xf9\x32\x3c\xba\xa6\xf8\x57\x00\x00\x00\xff\xff\xd3\xd9\xba\xf8\x53\x0e\x00\x00")

func templatesViewsSendHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesViewsSendHtml,
		"templates/views/send.html",
	)
}

func templatesViewsSendHtml() (*asset, error) {
	bytes, err := templatesViewsSendHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/views/send.html", size: 3667, mode: os.FileMode(420), modTime: time.Unix(1511788700, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/views/send.html": templatesViewsSendHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"views": &bintree{nil, map[string]*bintree{
			"send.html": &bintree{templatesViewsSendHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
