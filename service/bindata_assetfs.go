// Code generated by go-bindata.
// sources:
// templates/index.tpl.html
// DO NOT EDIT!

package service

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\xc1\x8a\xdb\x30\x10\x86\xef\x79\x8a\x41\xd0\xde\x6c\x43\x0f\xa5\xb4\x8e\x0f\x85\xde\x7b\xea\x7d\x6c\x8d\x1d\xc1\x58\x32\xd2\x38\x69\xc8\xe6\xdd\x57\xb6\xe5\xc4\x6c\x96\xc0\xc2\x0a\x32\xf1\x58\x9e\x5f\xdf\x3f\x92\x2e\x17\x30\xb6\xe1\x51\x13\xa8\xd6\x3b\x2b\x64\xb5\x02\xc5\x78\x76\xa3\x14\x07\x42\x4d\x3e\x97\x81\xf3\x83\xf4\xac\xe0\x7a\xdd\xed\xa6\x92\x16\xf2\xdf\xc8\x68\x1b\xfa\xe3\xbd\xf3\xd3\x7b\x88\xa3\xd4\xe6\x08\x0d\x63\x08\x7b\x85\x4c\x5e\x60\x8e\x99\x46\xdb\x91\x5f\x13\x13\x7a\x13\x02\xd6\x4c\xaa\x9a\xcb\xe6\xd2\x7a\x14\x71\x16\xe4\x3c\xd0\x5e\x2d\x89\x5a\xb5\x1a\x76\x81\x14\x68\x14\x5c\xcb\xd3\x02\x0a\xd0\x1b\xcc\x0e\x46\x6b\xb2\x7b\x25\x7e\x8c\xa2\x5f\xc5\xf4\x14\x7e\x95\xc5\x22\x73\x5f\x24\xa2\xbf\xcf\x5d\x44\xf0\x6a\x72\x16\xed\xcf\x26\xb7\x4e\x4e\xc4\x0c\x53\xc8\xb8\x4b\xc4\xdb\x69\xef\x4e\x0a\x82\x9c\x39\x72\x0f\xa8\xb5\xb1\xdd\x4f\xf8\x31\xfc\xdf\x9a\xdb\x7c\xde\x38\xce\x7a\x9d\x7d\x57\x55\x19\x24\x76\xbc\xab\x12\x51\x59\xa4\x3c\xd1\x3c\x2f\xbe\x4d\x27\x5f\x9b\x2d\xf9\xeb\x82\x11\x73\xa4\xd5\xdd\x76\x94\x61\x40\xbb\xaa\x31\xd6\xc4\x30\xc7\x2c\x8c\x4d\x43\x21\xa8\x6a\xd3\xa3\x7f\xc8\x23\xbd\xc0\xe0\x8d\x95\x16\xd4\x97\xfc\x5b\x3b\x1d\x01\x28\xcd\xaa\xd0\x22\xb4\x98\xf9\xb1\x8e\x6e\x0a\x13\x7f\x93\xfc\x03\x1b\x71\xf8\x18\xcc\x72\x5e\x1e\x59\xe0\x33\x60\x96\x1d\xbe\x31\xdc\x9b\x9d\x1e\xd3\xdf\xee\xf9\xd5\x68\x9d\x93\x37\x57\xe3\x35\x00\x00\xff\xff\x89\x51\xb3\xf8\x4c\x03\x00\x00")

func templatesIndexTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplHtml,
		"templates/index.tpl.html",
	)
}

func templatesIndexTplHtml() (*asset, error) {
	bytes, err := templatesIndexTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.html", size: 844, mode: os.FileMode(420), modTime: time.Unix(1442382309, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl.html": templatesIndexTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl.html": &bintree{templatesIndexTplHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
