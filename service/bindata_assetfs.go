// Code generated by go-bindata.
// sources:
// templates/index.tpl.html
// templates/send.tpl.html
// DO NOT EDIT!

package service

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x93\xc1\x8e\x9b\x30\x10\x86\xef\x79\x8a\x91\xa5\xf6\x06\x48\x3d\x54\x55\x4b\x38\x54\xea\xbd\xa7\xbd\x0f\x78\x20\x96\x06\x1b\xd9\x43\xb2\x51\x36\xef\xbe\x06\x4c\x82\x76\x57\x91\xf6\xb0\x96\x32\x61\x30\xf3\xfb\xfb\xc7\xf6\xe5\x02\xc6\x36\x3c\x6a\x02\xd5\x7a\x67\x85\xac\x56\xa0\x18\xcf\x6e\x94\xe2\x40\xa8\xc9\xe7\x32\x70\x7e\x90\x9e\x15\x5c\xaf\xbb\xdd\x54\xd2\x42\xfe\x17\x19\x6d\x43\xff\xbc\x77\x7e\x7a\x0f\x71\x94\xda\x1c\xa1\x61\x0c\x61\xaf\x90\xc9\x0b\xcc\x31\xd3\x68\x3b\xf2\x6b\x62\x42\x6f\x42\xc0\x9a\x49\x55\x73\xd9\x5c\x5a\x8f\x22\xce\x82\x9c\x07\xda\xab\x25\x51\xab\x56\xc3\x2e\x90\x02\x8d\x82\x6b\x79\x5a\x40\x01\x7a\x83\xd9\xc1\x68\x4d\x76\xaf\xc4\x8f\x51\xf4\xbb\x98\x9e\xc2\x9f\xb2\x58\x64\xee\x8b\x44\xf4\x8f\xb9\x8b\x08\x5e\x4d\xce\xa2\xfd\xd9\xe4\xd6\xc9\x89\x98\x61\x0a\x19\x77\x89\x78\x3b\xed\xdd\x49\x41\x90\x33\x47\xee\x01\xb5\x36\xb6\xfb\x0d\xbf\x86\xe7\xad\xb9\xcd\xe7\x8d\xe3\xac\xd7\xd9\x4f\x55\x95\x41\x62\xc7\xbb\x2a\x11\x95\x45\xca\x13\xcd\xe3\xe2\xdb\x74\xf2\xb5\xd9\x92\xff\x2e\x18\x31\x47\x5a\xdd\x6d\x47\x19\x06\xb4\xab\x1a\x63\x4d\x0c\x73\xcc\xc2\xd8\x34\x14\x82\xaa\x36\x3d\x7a\x42\x1e\x09\x5e\x60\xf0\xc6\x4a\x0b\xea\x5b\xfe\xa3\x9d\xce\x00\x94\x66\x95\x68\x11\x5a\xcc\xfc\x58\x47\x3b\x85\x89\xbf\x49\xff\x1d\x1c\x71\xf8\x1c\xcd\x72\x60\xbe\x08\x66\xd9\xe2\x1b\xc3\xbd\xdb\xe9\x31\xfd\xed\x1e\xdf\x8d\xd6\x39\x79\x73\x37\x5e\x03\x00\x00\xff\xff\x2c\xa8\x3b\xc2\x4d\x03\x00\x00")

func templatesIndexTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplHtml,
		"templates/index.tpl.html",
	)
}

func templatesIndexTplHtml() (*asset, error) {
	bytes, err := templatesIndexTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.html", size: 845, mode: os.FileMode(420), modTime: time.Unix(1442427121, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSendTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\xd1\x6e\xdb\x3a\x0c\x7d\xcf\x57\xf0\xea\x0e\x75\x8c\x2d\x76\x9b\x16\x18\x86\xda\xf9\x83\x62\x05\xfa\x38\xec\x41\xb1\xe9\x58\x83\x6c\x79\x92\xdc\x2e\x2d\xf2\xef\xa3\x64\x39\x4d\xda\xb4\xc1\x56\x6c\x98\x80\x36\x22\x45\x93\x87\x87\x34\xad\x87\x07\x10\x6d\x21\xfb\x12\x81\x55\x5a\xb5\x16\xdb\x92\x01\x93\x7c\xad\x7a\x9b\xd6\xc8\x4b\xd4\x89\xed\x64\x52\xdb\x46\x32\xd8\x6c\x26\x93\xcc\x14\x5a\x74\x16\x24\x6f\x57\x3d\x5f\x61\xce\xbe\xf1\x5b\x3e\x28\xd9\x62\x02\xb4\xde\x4d\xab\xbe\x2d\xac\x50\x2d\x4c\x63\x78\xf0\x3a\xb7\x6e\xb9\x86\x4a\xe9\x06\x72\x32\x89\xfe\x37\x14\x6c\x66\x1a\x13\xc5\x97\x93\xad\x8d\x3b\x4f\x4c\xbf\x6c\x84\x7d\xc1\x8b\x8f\x90\x74\xca\x90\x81\x33\xe6\xd6\xea\x69\xc4\xbd\x65\x14\x7f\x08\x1e\x50\x0b\x2e\xc5\x3d\x4e\xe3\x38\x29\x55\x8b\x5b\x67\xd3\x92\x5b\xfe\xd4\x9f\x5b\xa2\x02\x7f\x96\xd4\xdc\x7c\xbe\x6b\xaf\xb5\xea\x50\xdb\xf5\x34\x42\xad\x95\x8e\x62\x38\x39\x01\x77\xfe\x25\x28\xbe\xc2\x7f\x79\x0e\x6d\x2f\xe5\xb3\x93\x44\x62\xbb\xb2\xf5\xa1\x28\xdb\x1c\x3b\x8d\x1d\x11\x30\x8d\xb2\x52\xdc\x42\x21\xb9\x31\x39\xe3\x92\x42\x82\xff\x3f\x2b\x89\x60\xd4\xa3\x20\x4c\x23\x8c\xe1\x4b\x89\x6c\x11\xc1\xfb\x83\x7e\xc7\x15\x65\xcb\xde\x5a\xe2\xcd\xae\x3b\xaa\xcf\x20\xb0\x31\x46\x21\x95\x41\xe6\x01\x8f\x6e\x43\x60\xb6\x38\xb1\xa2\x41\x73\x99\xa5\xc3\x33\x47\x23\xed\xf3\x71\x0c\x55\x4a\x99\x2e\xa2\xf8\x99\xd5\x06\x50\x1a\x7c\x13\x59\xa6\x2f\x0a\x34\xe6\xdf\x66\x2b\xba\xb9\xba\x01\x7a\xc2\xd0\x6b\x03\xae\xfb\x21\xc0\x3e\x0e\xf1\x45\xea\xf6\x34\x9b\x38\xa9\xb8\x90\x8f\xbd\x7e\xa8\x03\xff\x64\xf7\xfd\x1d\x2e\xf7\x78\xe4\x65\x09\x56\xc1\xf7\x1e\x7b\x04\x97\x3d\x96\xaf\x23\x3c\x44\xe5\x66\x77\x04\xb9\xa5\xd1\xf6\xba\x25\x7f\xd4\x98\x97\x93\x5d\xb3\xf1\x37\x4b\x87\x99\xb7\xa0\x91\xe8\x87\x5a\x48\xd2\xed\x67\xb5\xd2\xe2\x9e\xc6\x29\xa7\xa1\xa9\x95\xc4\x41\xcd\x08\xb4\xad\x55\x99\x33\x37\xbd\x18\x08\xda\x8d\x43\x90\xc1\x30\xc1\x72\x96\x92\x94\x3a\x75\x98\xa6\xbb\x15\xf2\xce\x57\x5a\xf5\x5d\x38\xf4\x06\x92\x2f\x51\xba\xba\x92\xe3\x9a\x66\xdd\x23\xe1\x4a\x92\xef\xd9\x1c\x0a\xc2\x42\x38\x66\xde\x92\x2d\xae\x9d\x55\x96\x7a\x69\xc7\xcf\x4e\xa0\xf0\xe4\xd9\xe9\x4e\x1c\x6f\x23\xda\xae\xb7\xa1\xbc\x16\x7f\x58\xb6\x07\x2d\xc4\x19\x52\x0b\x58\x5a\xde\xe0\x56\xe8\x24\x2f\xb0\x56\x92\xbe\x2b\x39\xfb\xf8\xe9\xf4\x6c\x3e\x9f\x9f\x9f\x5f\x5c\x30\xfa\x38\xc8\x9e\xec\x76\xf3\xf2\x95\x9a\x3c\xdd\xfe\x0a\x1d\xa1\x49\x8e\x12\x72\x35\xd8\xfd\x1e\x25\x8e\x06\xae\x91\x1f\x66\x42\xab\x3b\xd2\x5d\x8c\x3c\x6c\x11\x39\x86\x46\x61\x91\xa5\xa3\x93\xb7\xa7\x7f\x08\x32\x84\x9d\xaa\x2a\x83\x76\x36\x3f\x5c\x55\xdf\x8f\xfe\xd3\x3b\xa2\x1d\xa5\xa1\xde\xa3\x14\x4a\x75\xe3\x2f\x0b\x21\xd4\xd2\xb6\x40\x7f\xb3\x4e\x8b\x86\xeb\xf5\xab\x65\xcc\x52\x87\x9c\x5e\x9c\xd7\xaf\x1f\x95\x52\xf6\xc9\xf5\xe3\x67\x00\x00\x00\xff\xff\x89\x0d\xc5\x32\xb0\x08\x00\x00")

func templatesSendTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSendTplHtml,
		"templates/send.tpl.html",
	)
}

func templatesSendTplHtml() (*asset, error) {
	bytes, err := templatesSendTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/send.tpl.html", size: 2224, mode: os.FileMode(420), modTime: time.Unix(1464033739, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl.html": templatesIndexTplHtml,
	"templates/send.tpl.html": templatesSendTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl.html": &bintree{templatesIndexTplHtml, map[string]*bintree{}},
		"send.tpl.html": &bintree{templatesSendTplHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
