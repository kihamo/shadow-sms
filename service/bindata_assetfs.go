// Code generated by go-bindata.
// sources:
// templates/index.tpl.html
// DO NOT EDIT!

package service

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x93\xc1\x8e\x9b\x30\x10\x86\xef\x79\x8a\x91\xa5\xf6\x06\x48\x3d\x54\x55\x4b\x38\x54\xea\xbd\xa7\xbd\x0f\x78\x20\x96\x06\x1b\xd9\x43\xb2\x51\x36\xef\xbe\x06\x4c\x82\x76\x57\x91\xf6\xb0\x96\x32\x61\x30\xf3\xfb\xfb\xc7\xf6\xe5\x02\xc6\x36\x3c\x6a\x02\xd5\x7a\x67\x85\xac\x56\xa0\x18\xcf\x6e\x94\xe2\x40\xa8\xc9\xe7\x32\x70\x7e\x90\x9e\x15\x5c\xaf\xbb\xdd\x54\xd2\x42\xfe\x17\x19\x6d\x43\xff\xbc\x77\x7e\x7a\x0f\x71\x94\xda\x1c\xa1\x61\x0c\x61\xaf\x90\xc9\x0b\xcc\x31\xd3\x68\x3b\xf2\x6b\x62\x42\x6f\x42\xc0\x9a\x49\x55\x73\xd9\x5c\x5a\x8f\x22\xce\x82\x9c\x07\xda\xab\x25\x51\xab\x56\xc3\x2e\x90\x02\x8d\x82\x6b\x79\x5a\x40\x01\x7a\x83\xd9\xc1\x68\x4d\x76\xaf\xc4\x8f\x51\xf4\xbb\x98\x9e\xc2\x9f\xb2\x58\x64\xee\x8b\x44\xf4\x8f\xb9\x8b\x08\x5e\x4d\xce\xa2\xfd\xd9\xe4\xd6\xc9\x89\x98\x61\x0a\x19\x77\x89\x78\x3b\xed\xdd\x49\x41\x90\x33\x47\xee\x01\xb5\x36\xb6\xfb\x0d\xbf\x86\xe7\xad\xb9\xcd\xe7\x8d\xe3\xac\xd7\xd9\x4f\x55\x95\x41\x62\xc7\xbb\x2a\x11\x95\x45\xca\x13\xcd\xe3\xe2\xdb\x74\xf2\xb5\xd9\x92\xff\x2e\x18\x31\x47\x5a\xdd\x6d\x47\x19\x06\xb4\xab\x1a\x63\x4d\x0c\x73\xcc\xc2\xd8\x34\x14\x82\xaa\x36\x3d\x7a\x42\x1e\x09\x5e\x60\xf0\xc6\x4a\x0b\xea\x5b\xfe\xa3\x9d\xce\x00\x94\x66\x95\x68\x11\x5a\xcc\xfc\x58\x47\x3b\x85\x89\xbf\x49\xff\x1d\x1c\x71\xf8\x1c\xcd\x72\x60\xbe\x08\x66\xd9\xe2\x1b\xc3\xbd\xdb\xe9\x31\xfd\xed\x1e\xdf\x8d\xd6\x39\x79\x73\x37\x5e\x03\x00\x00\xff\xff\x2c\xa8\x3b\xc2\x4d\x03\x00\x00")

func templatesIndexTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplHtml,
		"templates/index.tpl.html",
	)
}

func templatesIndexTplHtml() (*asset, error) {
	bytes, err := templatesIndexTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.html", size: 845, mode: os.FileMode(420), modTime: time.Unix(1442427121, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl.html": templatesIndexTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl.html": &bintree{templatesIndexTplHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
